-- CREATE TABLE IF NOT EXISTS product_change_log (
--     id SERIAL PRIMARY KEY,
--     product_id INTEGER NOT NULL,
--     action TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     processed BOOLEAN DEFAULT FALSE
-- );

-- CREATE OR REPLACE FUNCTION log_product_change() RETURNS TRIGGER AS $$
-- BEGIN
--     IF (TG_OP = 'DELETE') THEN
--         INSERT INTO product_change_log(product_id, action)
--         VALUES (OLD.id, TG_OP);
--         RETURN OLD;
--     ELSE
--         INSERT INTO product_change_log(product_id, action)
--         VALUES (NEW.id, TG_OP);
--         RETURN NEW;
--     END IF;
-- END;
-- $$ LANGUAGE plpgsql;

-- DROP TRIGGER IF EXISTS product_change_trigger ON products;

-- CREATE TRIGGER product_change_trigger
-- AFTER INSERT OR UPDATE OR DELETE ON products
-- FOR EACH ROW
-- EXECUTE FUNCTION log_product_change();


-- CREATE OR REPLACE FUNCTION notify_product_change() RETURNS TRIGGER AS $$
-- DECLARE
--     payload JSON;
-- BEGIN
--     IF (TG_OP = 'DELETE') THEN
--         payload := json_build_object(
--             'id', OLD.id,
--             'action', TG_OP
--         );
--         PERFORM pg_notify('product_change_channel', payload::text);
--         RETURN OLD;
--     ELSE
--         payload := json_build_object(
--             'id', NEW.id,
--             'action', TG_OP
--         );
--         PERFORM pg_notify('product_change_channel', payload::text);
--         RETURN NEW;
--     END IF;
-- END;
-- $$ LANGUAGE plpgsql;

-- DROP TRIGGER IF EXISTS product_change_trigger ON products;

-- CREATE TRIGGER product_change_trigger
-- AFTER INSERT OR UPDATE OR DELETE ON products
-- FOR EACH ROW
-- EXECUTE FUNCTION notify_product_change();